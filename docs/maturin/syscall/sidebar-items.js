initSidebarItems({"enum":[["ErrorNo","错误编号"]],"fn":[["check_thread_blocked","检查线程是否在等待某种资源"],["clear_loop_checker","进入新进程时，清空计数器。 目前认为全局只有一个 checker，不处理更多的进程导致的死循环，如pipe"],["set_waiter_for_thread","设置一个线程等待某个事件 在切换线程进入时会检查是否触发 waiter"],["syscall","处理系统调用"],["wake_thread","唤醒某个线程，如 waiter 存在，则返回 true(无论是否之前就被唤醒)。 注意，这不是线程被唤醒的唯一方式。如果在除了 WAITING_BOARD 之外的地方也保存了对应的 Arc 那么 waiter 也可能在其他地方被设置为 woken"]],"mod":[["flags","系统调用中的选项/类型"],["fs","与读写、文件相关的系统调用"],["futex","专门处理 linux 特色的 futex 锁。"],["loops","检查 syscall 调用中的死循环。 跟具体系统调用无关，只是为了方便在出现死循环（比如有某种wait的syscall未实现）的时候， 用来提前结束进程，至少保证OS不崩"],["process","与进程相关的系统调用"],["select","处理 pselect 相关的结构"],["socket","关于 socket 的 syscall"],["syscall_no","系统调用编号"],["times","与时间处理相关的系统调用"]],"struct":[["PollFd","poll 和 ppoll 用到的结构"]],"type":[["SysResult",""]]});